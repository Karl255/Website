<nav class="navigation-bar branch">
	<a class="material-icons" href="#">menu</a>
	<ul class="navigation-root">
		@{
			IOrderedEnumerable<IDocument> OrderPages(IEnumerable<IDocument> documents) =>
				documents
				.OrderBy(d => d.GetInt("NavOrder"))
				.ThenBy(d => DateTime.Parse(d.GetString("Date") ?? DateTime.MinValue.ToString()))
				.ThenBy(d => d.GetString("Title", ""));

			//recursive html generator for navigation
			void GenerateNavForPage(IDocument document)
			{
				if (document.HasChildren())
				{
					//if it has children, it'll become unclickable (trough css)
					//this is on purpose since I never need the page at the branch
					<li class="branch">
						<a class="disabled" href="#">@document.GetTitle()</a>
						<ul>
							@{
								//render all its children recursively
								foreach (var child in OrderPages(document.GetChildren()))
								{
									GenerateNavForPage(child);
								}
							}
						</ul>
					</li>
				}
				else
				{
					//otherwise simply create a link to it
					<li><a href="@document.GetLink()">@document.GetTitle()</a></li>
				}
			}

			//I couldn't find a way of finding the true root document (probably not even possible) so this has to do
			//collection of pages in root
			DocumentList<IDocument> rootPages = Outputs["Content"];

			foreach (var page in OrderPages(rootPages))
			{
				GenerateNavForPage(page);
			}
		}
		<li class="branch">
			<a class="disabled" href="#">Friends</a>
			<ul>
				<li><a href="https://xandrei-is.fun/">Xandrei</a></li>
				<li><a href="https://ad2017.xyz/">ad2017</a></li>
				<li><a href="https://www.creepi.xyz/">creepi</a></li>
				<li><a href="https://nsg650.github.io/">nsg650</a></li>
				<li><a href="https://driftini.github.io/index.html">driftini</a></li>
				<li><a href="https://novotab51.github.io/">novotab51</a></li>
			</ul>
		</li>
	</ul>
</nav>