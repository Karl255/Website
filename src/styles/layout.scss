@use "imports";

body {
	--master-column-count: 6;
	--content-width: 70rem;
	display: grid;
	grid-template-columns: minmax(1rem, 1fr) minmax(0, var(--content-width)) minmax(1rem, 1fr);
	grid-auto-rows: auto;
	gap: 4rem 1rem;
	align-content: start; // to prevent grid from stretching all the rows to fill the screen (but still keeping the body's min-height of 100vh)
	padding-bottom: 2rem; // equal to the minimum side "padding" + gap (first and last columns of the master grid)

	$accent-sides-size: 10%;
	background-image: url(/hex-pattern.png), linear-gradient(to right, var(--accent-400), hsl(0 0% 9%) #{$accent-sides-size}, hsl(0 0% 9%) calc(100% - #{$accent-sides-size}), var(--accent-400));
	background-blend-mode: multiply;
	background-attachment: fixed;
}

body > * {
	grid-column: 2 / -2;
}

body > section {
	background-color: var(--bg-100);
	border-radius: 1rem;
	
	box-shadow: 0 0 1rem black;
	padding: 2rem;
}

body > .columns {
	display: grid;
	grid-template-columns: repeat(12, 1fr);
	gap: 2rem;
	margin-top: 4rem;
	
	position: relative;
	
	text-align: center;
	
	ul {
		text-align: left;
	}
	
	h1 {
		grid-column: 1 / -1;
		
		position: absolute;
		bottom: calc(100% + 2rem);
		left: 50%;
		transform: translateX(-50%);
		
		&::before {
			content: "";
			background-color: currentColor;
			
			position: absolute;
			width: 6rem;
			height: .25rem;
			top: calc(100% + .5rem);
			left: 50%;
			transform: translateX(-50%);
			
			border-radius: 0 0 .25rem .25rem;
		}
	}
	
	// desktop only, smart placement for the last row of columns
	@media screen and (min-width: imports.$mobile-screen-size) {
		&.two-columns > section {
			grid-column: span 6;
		}
		
		&.two-columns > section:nth-of-type(2n - 1):last-child {
			grid-column: 4 / span 6;
		}
		
		&.three-columns > section {
			grid-column: span 4;
		}
		
		&.three-columns > section:nth-of-type(3n - 2):last-child {
			grid-column: 5 / span 4;
		}
		
		&.three-columns > section:nth-of-type(3n - 2):nth-last-of-type(2) {
			grid-column: 3 / span 4;
		}

		&.three-columns > section:nth-of-type(3n - 1):nth-last-of-type(1) {
			grid-column: 7 / span 4;
		}
	}
	
	// mobile only
	@media screen and (max-width: imports.$mobile-screen-size) {
		> * {
			grid-column: 1 / -1;
		}
		
	}
}

body > .two-columns {
	--column-count: 2;
}

body > .three-columns {
	--column-count: 3;
}
