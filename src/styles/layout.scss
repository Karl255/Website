@use "imports";

body {
	--master-column-count: 6;
	--content-width: 60rem;
	display: grid;
	grid-template-columns: minmax(1rem, 1fr) repeat(var(--master-column-count), minmax(0, calc(var(--content-width) / var(--master-column-count)))) minmax(1rem, 1fr);
	grid-auto-rows: auto;
	gap: 2rem 1rem;
	align-content: start; // to prevent grid from stretching all the rows to fill the screen (but still keeping the body's min-height of 100vh)
	padding-bottom: 2rem; // equal to the minimum side "padding" + gap (first and last columns of the master grid)

	$accent-sides-size: 10%;
	background-image: url(/hex-pattern.png), linear-gradient(to right, var(--accent-400), hsl(0 0% 9%) #{$accent-sides-size}, hsl(0 0% 9%) calc(100% - #{$accent-sides-size}), var(--accent-400));
	background-blend-mode: multiply;
	background-position: center top;
}

body > * {
	grid-column: 1 / -1;

	display: grid;
	@include imports.grid-template-column-subgrid;
}

body > .text-flow {
	grid-column: 2 / -2;
	display: block;
}

body > .columns {
	gap: 2rem;
	
	> * {
		grid-column: 2 / -2;
	}

	h1, h2, h3, h4, h5, h6 {
		text-align: center;
	}
	
	// desktop only
	@media screen and (min-width: imports.$mobile-screen-size) {
		&.two-columns > section:nth-of-type(2n - 1),
		&.three-columns > section:nth-of-type(3n - 2) {
			grid-column: 2 / span calc(var(--master-column-count) / var(--column-count, 1));
		}
		
		> section {
			grid-column: span calc(var(--master-column-count) / var(--column-count, 1));
		}
	}
	
	// mobile only
	@media screen and (max-width: imports.$mobile-screen-size) {
		> section + section {
			margin-top: 1rem;
		}
	}
}

body > .two-columns {
	--column-count: 2;
}

body > .three-columns {
	--column-count: 3;
}
